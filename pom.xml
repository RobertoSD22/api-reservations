<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.1.3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.vuelos</groupId>
	<artifactId>api-reservations</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>api-reservations</name>
	<description>Api para reservas de vuelos</description>

	<properties>
		<java.version>17</java.version>
		<mapstruct.version>1.5.5.Final</mapstruct.version>
		<maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
		<lombok.version>1.18.22</lombok.version>
		<resilience4j.version>2.1.0</resilience4j.version>

		<!-- OpenAPI -->
		<springdoc-openapi-starter-webmvc-ui.version>2.1.0</springdoc-openapi-starter-webmvc-ui.version>
		<springdoc-openapi-maven-plugin.version>1.1</springdoc-openapi-maven-plugin.version>
		<zally-ruleset-zalando.version>2.1.0</zally-ruleset-zalando.version>
		<zally-maven-plugin.version>1.0.3</zally-maven-plugin.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Actuator -->
		<!-- Sirve para monitorear la aplicación -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<!-- Validation -->
		<!-- Sirve para validar los datos que se envían en las peticiones -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

		<!-- Webflux -->
		<!-- Sirve para trabajar con programación reactiva -->
		<!-- En el ejercicio de la clase sirve para comunicarse con otro microservicio -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>

		<!-- AOP -->
		<!-- Sirve para programación orientada a aspectos -->
		<!-- En el ejercicio de la clase sirve para manejar interceptores (se agrego junto con el webflux)-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>

		<!-- Logging -->
		<!-- Sirve para manejar los logs de la aplicación -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-logging</artifactId>
		</dependency>

		<!-- OpenAPI -->
		<!-- Sirve para documentar la API -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>${springdoc-openapi-starter-webmvc-ui.version}</version>
		</dependency>

		<!-- Mapstruct -->
		<!-- Sirve para convertir objetos de un tipo a otro -->
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${mapstruct.version}</version>
		</dependency>

		<!-- Lombok -->
		<!-- Sirve para generar los getters, setters, constructores, etc. de una clase -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
		</dependency>

		<!-- Resilience4j -->
		<!-- Sirve para el tema de circuit breaker, rate limiter, retry, etc. -->
		<dependency>
			<groupId>io.github.resilience4j</groupId>
			<artifactId>resilience4j-spring-boot3</artifactId>
			<version>${resilience4j.version}</version>
		</dependency>

		<dependency>
			<groupId>org.jetbrains</groupId>
			<artifactId>annotations</artifactId>
			<version>13.0</version>
			<scope>compile</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<annotationProcessorPaths>
						<path>
							<groupId>org.mapstruct</groupId>
							<artifactId>mapstruct-processor</artifactId>
							<version>${mapstruct.version}</version>
						</path>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>

		</plugins>
	</build>

	<!--<profiles>
		<profile>
			<id>OPEN API</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<configuration>
							<wait>10000</wait> &lt;!&ndash; Tiempo de espera para que se levante la aplicación (10 segundos) &ndash;&gt;
							<maxAttempts>180</maxAttempts> &lt;!&ndash; Número de intentos para levantar la aplicación &ndash;&gt;
						</configuration>
						<executions>
							<execution>&lt;!&ndash; Para que se ejecute el plugin de OpenAPI &ndash;&gt;
								<goals>
									<goal>repackage</goal>
								</goals>
							</execution>
							<execution> &lt;!&ndash; Primer paso para levantar la aplicación &ndash;&gt;
								<id>start-app</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>start</goal>
								</goals>
							</execution>
							<execution> &lt;!&ndash; Segundo paso bajar la aplicación &ndash;&gt;
								<id>stop-app</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.springdoc</groupId> &lt;!&ndash; Plugin de OpenAPI &ndash;&gt; &lt;!&ndash; Sirve para validar la documentación de la API &ndash;&gt;
						<artifactId>springdoc-openapi-maven-plugin</artifactId>
						<version>${springdoc-openapi-maven-plugin.version}</version>
						<executions>
							<execution>
								<id>integration-test</id>
								<phase>integration-test</phase>
								<goals>
									<goal>generate</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<apiDocsUrl>http://localhost:8081/api/v3/api-docs</apiDocsUrl> &lt;!&ndash; URL de la documentación &ndash;&gt;
							<outputFileName>openapi-salida-documentacion.json</outputFileName> &lt;!&ndash; Nombre del archivo &ndash;&gt;
							<outputDir>${project.build.directory}</outputDir> &lt;!&ndash; Directorio donde se va a guardar el archivo &ndash;&gt;
							<skip>false</skip>
						</configuration>
					</plugin>
					<plugin>
						<groupId>com.ethlo.zally</groupId>
						<artifactId>zally-maven-plugin</artifactId>
						<version>${zally-maven-plugin.version}</version>
						<executions>
							<execution>
								<phase>verify</phase>
								<goals>
									<goal>report</goal>
									<goal>validate</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<failOn>MUST</failOn> &lt;!&ndash; Hay diferentes niveles de validación, MUST son al menos las que debemos cumplir &ndash;&gt;
							<source>target/openapi-salida-documentacion.json</source>&lt;!&ndash; Archivo de documentación (que se definió arriba&ndash;&gt;
							<resultFile>target/openapi-resultado-documentacion.json</resultFile>&lt;!&ndash; Archivo de resultados &ndash;&gt;
						</configuration>
						<dependencies> &lt;!&ndash; Contiene las reglas que se van a usar para validar la documentación &ndash;&gt;
							<dependency>
								<groupId>org.zalando</groupId>
								<artifactId>zally-ruleset-zalando</artifactId>
								<version>${zally-ruleset-zalando.version}</version>
							</dependency>
						</dependencies>
					</plugin>

				</plugins>
			</build>
		</profile>
	</profiles>-->

</project>
